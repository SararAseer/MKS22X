public class QueenBoard{
    private int[][]board;
    private int size;
    
    public QueenBoard(int x){
	board= new int [x][x];
	size=x;
    }

    public void avhd(int r,int c){
	
	for (int i= 0 ; i < size ; i++){
	    int x=i;
	    board[r][i]+=1;
	    board[i][c]+=1;
	    if(r+1<size){
		board[r+i][c+i]+=1;
	    }
	    if(r-i>-1){
		board[r-i][c-i]+=1;
	    }
	}
	  
    
    }
    
    public void rvhd(int r,int c){
	
	for (int i= 0 ; i < size ; i++){
	    int x=i;
	    board[r][i]-=1;
	    board[i][c]-=1;
	    if(r+1<size){
		board[r+i][c+i]-=1;
	    }
	    if(r-i>-1){
		board[r-i][c-i]-=1;
	    }
	}
	  
    
    }
    
    private boolean addQueen(int r, int c){
	boolean q=false;
	if (board[r][c]!=-1){
	    avhd(r,c);
	    q=true;
	    board[r][c]=1;
	}
	return q;
    }
    private boolean removeQueen(int r, int c){
	boolean q=false;
	if (board[r][c]==-1){
	    rvhd(r,c);
	    q=true;
	    board[r][c]=0;
	}
	return q;
    }


    /**
 *@return The output string formatted as follows:
     *All numbers that represent queens are replaced with 'Q' 
     *all others are displayed as underscores '_'
     *There are spaces between each symbol:  
     *Q _ _ _
     *_ _ Q _
     * etc.
     */
    public String toString(){
	String s="";
	for (int i=0; i < size; i++){
	    for (int x=0; x < size; x++){
		if(board[i][x]==-1){
		    s+="Q";
		}
		else{
		    s+="_";
		}
		if(i==size-1){
		    s+="\n";		    
		}
	    }
	}
	return s;
    }
  
    /**
     *@return false when the board is not solveable and leaves the board filled with zeros; 
     *        true when the board is solveable, and leaves the board in a solved state
     *@throws IllegalStateException when the board starts with any non-zero value
     */
    public boolean solve(){
	if(doit(0,0)){
	    return true;
	}
	return false;
    }

    public boolean doit(int r, int c){
	if (r!=size-1){
	    if(board[r][c]!=-1){
	    addQueen(r,c);
	    }
	    else{
	    }
		
	}
     
	return r==size-1 || doit(r+1)(c+1);
    }
  
    /**
     *@return the number of solutions found, and leaves the board filled with only 0's
     *@throws IllegalStateException when the board starts with any non-zero value
     */
    public int countSolutions(){
	return size;
    }
  




}
